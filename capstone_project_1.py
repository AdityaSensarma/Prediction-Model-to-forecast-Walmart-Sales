# -*- coding: utf-8 -*-
"""Capstone Project 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KZWW0PvsnFpjitLPbrSQQXiV371FGHtp
"""

#Project 1

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
from matplotlib import dates
from datetime import datetime
import sklearn
import seaborn as sns

df = '/content/drive/MyDrive/Walmart (1).csv'
walmart_data = pd.read_csv(df)
walmart_data.head()

# Convert date to datetime format
walmart_data['Date'] =  pd.to_datetime(walmart_data['Date'])
walmart_data.info()

# Check missing values
walmart_data.isnull().sum()

walmart_data["Day"]= pd.DatetimeIndex(walmart_data['Date']).day
walmart_data['Month'] = pd.DatetimeIndex(walmart_data['Date']).month
walmart_data['Year'] = pd.DatetimeIndex(walmart_data['Date']).year
walmart_data

#1. Useful Insignts to Improve

#Overall Monthly Sales
plt.figure(figsize=(15,7))
plt.bar(walmart_data["Month"],walmart_data["Weekly_Sales"])
plt.xlabel("Months")
plt.ylabel("Weekly Sales")
plt.title("Monthly view of sales")
plt.show()

#Temperature effect on weekly Sales
plt.figure(figsize=(15,7))
plt.bar(walmart_data["Temperature"],walmart_data["Weekly_Sales"])
plt.ylabel("Weekly Sales")
plt.xlabel("Temperature")
plt.title("Temperature effect on weekly Sales")
plt.show()

#Defining holiday dates
Super_Bowl =['12-2-2010', '11-2-2011', '10-2-2012']
Labour_Day =  ['10-9-2010', '9-9-2011', '7-9-2012']
Thanksgiving =  ['26-11-2010', '25-11-2011', '23-11-2012']
Christmas = ['31-12-2010', '30-12-2011', '28-12-2012']

#Calculating mean sales on holidays :
Super_Bowl_Sales = (pd.DataFrame(walmart_data.loc[walmart_data.Date.isin(Super_Bowl)]))['Weekly_Sales'].mean()
Labour_Day_Sales = (pd.DataFrame(walmart_data.loc[walmart_data.Date.isin(Labour_Day)]))['Weekly_Sales'].mean()
Thanksgiving_Sales = (pd.DataFrame(walmart_data.loc[walmart_data.Date.isin(Thanksgiving)]))['Weekly_Sales'].mean()
Christmas_Sales = (pd.DataFrame(walmart_data.loc[walmart_data.Date.isin(Christmas)]))['Weekly_Sales'].mean()
Non_Holiday_Sales = walmart_data[walmart_data['Holiday_Flag'] == 0 ]['Weekly_Sales'].mean()

Mean_Sales = {'Super_Bowl_Sales' : Super_Bowl_Sales,
              'Labour_Day_Sales': Labour_Day_Sales,
              'Thanksgiving_Sales':Thanksgiving_Sales,
              'Christmas_Sales': Christmas_Sales,
              'Non_Holiday_Sales': Non_Holiday_Sales}
Mean_Sales

#2. Forecast sales for each store for next 12 weeks

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import IsolationForest

data = pd.read_csv(df)
data.head()

# Preprocess the data
data['Date'] = pd.to_datetime(data['Date'])
data['Week'] = data['Date'].dt.week
data = data[['Store', 'Week', 'Weekly_Sales']]
data = data.groupby(['Store', 'Week'], as_index=False).sum()

# Outlier detection
clf = IsolationForest(contamination=0.05, random_state=42)
outliers = clf.fit_predict(data[['Weekly_Sales']])
data['Outlier'] = outliers

# Remove outliers
data = data[data['Outlier'] != -1]

# Prepare the features and target variable
X = data[['Store', 'Week']]
y = data['Weekly_Sales']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a random forest regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print('Mean Squared Error:', mse)

# Make predictions for the next 12 weeks
last_week = data['Week'].max()
stores = data['Store'].unique()
next_weeks = pd.DataFrame({'Store': [store for store in stores for _ in range(13)],
                           'Week': [week for _ in range(len(stores)) for week in range(last_week + 1, last_week + 14)]})

# Predict sales for the next 12 weeks
sales_predictions = model.predict(next_weeks)

# Add an extra week to the next_weeks DataFrame
extra_week = pd.DataFrame({'Store': [next_weeks['Store'].iloc[-1]], 'Week': [next_weeks['Week'].max() + 1]})
next_weeks = next_weeks.append(extra_week, ignore_index=True)

# Predict sales for the additional week
extra_week_prediction = model.predict(next_weeks.iloc[[-1]])

# Concatenate the predictions
sales_predictions = np.append(sales_predictions, extra_week_prediction)

# Display the sales predictions for each store
predictions_df = pd.DataFrame({'Store': next_weeks['Store'], 'Week': next_weeks['Week'], 'Sales_Prediction': sales_predictions})
predictions_df = predictions_df.append({'Store': next_weeks['Store'].iloc[-1], 'Week': next_weeks['Week'].max() + 1}, ignore_index=True)

print(predictions_df)

# Assuming you have the 'predictions_df' DataFrame containing the sales predictions
# Plot the sales predictions for each store
plt.figure(figsize=(12, 6))
for store in predictions_df['Store'].unique():
    store_predictions = predictions_df[predictions_df['Store'] == store]
    plt.plot(store_predictions['Week'], store_predictions['Sales_Prediction'], label=f'Store {store}')

plt.xlabel('Week')
plt.ylabel('Sales Prediction')
plt.title('Sales Predictions for Each Store')
plt.legend()
plt.show()

